name: Continuous Integration

on:
  push:
    branches:
      - 'master'
    paths-ignore:
      - 'docs/**'
      - 'examples/**'
      - '**.md'
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches:
      - master
    types:
      - opened
      - reopened
      - synchronize
    paths-ignore:
      - 'docs/**'
      - 'examples/**'
      - '**.md'

concurrency:
  group: ${{ github.ref_name }}-ci
  cancel-in-progress: true

jobs:

  vars:
    name: Get variables
    runs-on: ubuntu-20.04
    outputs:
      sha_short: ${{ steps.vars.outputs.sha }}
      go_version: ${{ steps.vars.outputs.go_version }}
      repo_name: ${{ steps.vars.outputs.repo }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Output Variables
        id: vars
        run: |
          echo "::set-output name=sha::$(echo ${GITHUB_SHA} | cut -c1-7)"
          echo "::set-output name=go_version::$(grep "go 1." go.mod | cut -d " " -f 2)"
          echo "::set-output name=repo::$(echo ${GITHUB_REPOSITORY} | cut -d '/' -f 2)"

  build:
    name: Build Image
    runs-on: ubuntu-20.04
    needs: vars
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: DockerHub Login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        if: github.event_name != 'pull_request'
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
        if: github.event_name != 'pull_request'
      - name: RedHat Registry Login
        uses: docker/login-action@v1
        with:
          registry: registry.redhat.io
          username: ${{ secrets.RH_DOCKER_USERNAME }}
          password: ${{ secrets.RH_DOCKER_PASSWORD }}
      - name: Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            nginx/nginx-ingress-operator
          tags: |
            type=edge
            type=ref,event=pr
            type=semver,pattern={{version}}
          labels: |
            org.opencontainers.image.documentation=https://docs.nginx.com/nginx-ingress-controller
            org.opencontainers.image.vendor=NGINX Inc <kubernetes@nginx.com>
      - name: Output Variables
        id: var
        run: |
          version=${{ steps.meta.outputs.version }}
          if ${{ startsWith(github.ref, 'refs/tags/') }}; then
              operator_version=v$version
          else
              tag=$(git describe --tags --abbrev=0)
              operator_version=$tag-$version-${{ needs.vars.outputs.sha_short }}
          fi
          echo "::set-output name=version::$operator_version"
      - name: Build Image
        uses: docker/build-push-action@v2
        with:
          context: '.'
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          load: ${{ github.event_name == 'pull_request' }}
          push: ${{ github.event_name != 'pull_request' }}
          platforms: "linux/amd64,linux/arm64,linux/ppc64le, linux/s390x"
          pull: true
          build-args: |
            VERSION=${{ steps.var.outputs.version }}
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.2.1
        continue-on-error: true
        with:
          image-ref: nginx/nginx-ingress-operator:${{ steps.meta.outputs.version }}
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          ignore-unfixed: 'true'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'
      - name: Upload Scan Results
        uses: actions/upload-artifact@v2
        continue-on-error: true
        with:
          name: 'trivy-results.sarif'
          path: 'trivy-results.sarif'
        if: always()


  notify:
    name: Notify
    runs-on: ubuntu-20.04
    needs: [vars, build]
    if: always() && github.ref == 'refs/heads/master'
    steps:
      - name: Workflow Status
        id: check
        uses: martialonline/workflow-status@v2
      - name: Send Notification
        uses: 8398a7/action-slack@v3
        if: steps.check.outputs.status == 'failure'
        with:
          status: custom
          custom_payload: |
            {
              username: 'Github',
              icon_emoji: ':octocat:',
              mention: 'channel',
              attachments: [{
                title: '${{ needs.vars.outputs.repo_name }} ${{ github.workflow }} pipeline has failed',
                color: '${{ steps.check.outputs.status }}' == 'failure' ? 'danger' : 'warning',
                fields: [{
                  title: 'Commit Hash',
                  value: '${{ needs.vars.outputs.sha_short }}',
                  short: true
                },
                {
                  title: 'Author',
                  value: '${{ github.actor }}',
                  short: true
                },
                {
                  title: 'Commit Message',
                  value: `${{ github.event.head_commit.message }}`,
                  short: false
                },
                {
                  title: 'Pipeline URL',
                  value: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}',
                  short: false
                }]
              }]
            }
        env:
          GITHUB_TOKEN: ${{ github.token }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
