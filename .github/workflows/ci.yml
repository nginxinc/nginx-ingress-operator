name: Continuous Integration

on:
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - master
    types:
      - opened
      - reopened
      - synchronize
  create:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

env:
  DOCKER_BUILDKIT: 1
  GOLANG_VERSION: 1.15

jobs:

  binary:
    name: Build Binary
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Build Binary
        run: make binary
        env:
          GOFLAGS: '-gcflags=-trimpath=${{ github.workspace }} -asmflags=-trimpath=${{ github.workspace }}'
      - name: Upload Binary
        uses: actions/upload-artifact@v2
        with:
          name: nginx-ingress-operator
          path: ${{ github.workspace }}/build/_output/bin/nginx-ingress-operator

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Setup Golang Environment
        uses: actions/setup-go@v2
        with:
          go-version: '${{ env.GOLANG_VERSION }}'
      - name: Run Tests
        run: make test

  build:
    name: Build Image
    runs-on: ubuntu-18.04
    needs: [binary, unit-tests]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Retrieve Binary
        uses: actions/download-artifact@v2
        with:
          name: nginx-ingress-operator
          path: ${{ github.workspace }}/build/_output/bin
      - name: Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Build Image
        uses: docker/build-push-action@v2
        with:
          file: build/Dockerfile
          context: '.'
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: nginx/nginx-ingress-operator:${{ github.sha }}
          push: false

  release-docker:
    name: Release Image
    runs-on: ubuntu-18.04
    needs: [build, unit-tests]
    if: 
      github.repository == 'nginxinc/nginx-ingress-operator' &&
      github.event_name == 'create' && 
      contains(github.ref, 'refs/tags/')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Retrieve Binary
        uses: actions/download-artifact@v2
        with:
          name: nginx-ingress-operator
          path: ${{ github.workspace }}/build/_output/bin
      - name: Retrieve Tag
        id: get_version
        run: echo ::set-output name=GIT_TAG::$(echo ${GITHUB_REF/refs\/tags\//} | tr -d v)
      - name: Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: network=host
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: DockerHub Login
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Dockerhub
        uses: docker/build-push-action@v2
        with:
          file: build/Dockerfile
          context: '.'
          tags: |
            nginx/nginx-ingress-operator:latest
            nginx/nginx-ingress-operator:${{ steps.get_version.outputs.GIT_TAG }}
          push: true

  notify:
    name: Notify
    runs-on: ubuntu-18.04
    needs: release-docker
    if: always() && github.ref == 'refs/heads/master'
    steps:
      - name: Workflow Status
        id: check
        uses: martialonline/workflow-status@v1
      - name: Calculate SHA
        id: commit
        run: echo "::set-output name=sha::$(echo ${GITHUB_SHA} | cut -c1-7)"
      - name: Send Notification
        uses: 8398a7/action-slack@v3
        if: contains(steps.check.outputs.status, 'failed')
        with:
          status: custom
          custom_payload: |
            {
              username: 'Github',
              icon_emoji: ':octocat:',
              mention: 'channel',
              attachments: [{
                color: '${{ steps.check.outputs.status }}' == 'success' ? 'good' : '${{ steps.check.outputs.status }}' == 'failed' ? 'danger' : 'warning',
                fields: [{
                  title: 'Failed Commit',
                  value: '${{ steps.commit.outputs.sha }}',
                  short: true
                },
                {
                  title: 'Author',
                  value: '${{ github.actor }}',
                  short: true
                },
                {
                  title: 'Commit Message',
                  value: `${{ github.event.head_commit.message }}`,
                  short: false
                },
                {
                  title: 'Pipeline URL',
                  value: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}',
                  short: false
                }]
              }]
            }
        env:
          GITHUB_TOKEN: ${{ github.token }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}