name: Continuous Integration

on:
  push:
    branches:
      - 'master'
    paths-ignore:
      - 'docs/**'
      - 'examples/**'
      - '**.md'
  pull_request:
    branches:
      - master
    types:
      - opened
      - reopened
      - synchronize
    paths-ignore:
      - 'docs/**'
      - 'examples/**'
      - '**.md'
  create:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

env:
  DOCKER_BUILDKIT: 1

jobs:

  vars:
    name: Get variables
    runs-on: ubuntu-20.04
    outputs:
      sha_short: ${{ steps.vars.outputs.sha }}
      go_version: ${{ steps.vars.outputs.go_version }}
      git_tag: ${{ steps.vars.outputs.git_tag }}
      repo_name: ${{ steps.vars.outputs.repo }}
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Output Variables
        id: vars
        run: |
          echo "::set-output name=sha::$(echo ${GITHUB_SHA} | cut -c1-7)"
          echo "::set-output name=go_version::$(grep "go 1." go.mod | cut -d " " -f 2)"
          echo "::set-output name=git_tag::$(echo ${GITHUB_REF/refs\/tags\//} | tr -d v)"
          echo "::set-output name=repo::$(echo ${GITHUB_REPOSITORY} | cut -d '/' -f 2)"

  binary:
    name: Build Binary
    runs-on: ubuntu-20.04
    needs: vars
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Setup Golang Environment
        uses: actions/setup-go@v2
        with:
          go-version: ${{ needs.vars.outputs.go_version }}
      - name: Build Binary
        run: make build
      - name: Cache Artifacts
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/bin/manager
          key: nginx-ingress-operator-${{ github.run_id }}-${{ github.run_number }}

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-20.04
    needs: vars
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Setup Golang Environment
        uses: actions/setup-go@v2
        with:
          go-version: ${{ needs.vars.outputs.go_version }}
      - name: Run Tests
        run: make test

  build:
    name: Build Image
    runs-on: ubuntu-20.04
    needs: [binary, unit-tests]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Fetch Cached Artifacts
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/bin/manager
          key: nginx-ingress-operator-${{ github.run_id }}-${{ github.run_number }}
      - name: Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Build Image
        uses: docker/build-push-action@v2
        with:
          context: '.'
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: nginx/nginx-ingress-operator:${{ github.sha }}
          push: false
          pull: true
          load: true
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.2.0
        continue-on-error: true
        with:
          image-ref: nginx/nginx-ingress-operator:${{ github.sha }}
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          ignore-unfixed: 'true'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        continue-on-error: true
        with:
          sarif_file: 'trivy-result.sarif'
      - name: Upload Scan Results
        uses: actions/upload-artifact@v2
        continue-on-error: true
        with:
          name: 'trivy-results.sarif'
          path: 'trivy-results.sarif'
        if: always()

  release-docker:
    name: Release Image
    runs-on: ubuntu-20.04
    needs: [vars, build, unit-tests]
    if:
      github.repository == 'nginxinc/nginx-ingress-operator' &&
      github.event_name == 'create' &&
      contains(github.ref, 'refs/tags/')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Fetch Cached Artifacts
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/build/_output/bin/nginx-ingress-operator
          key: nginx-ingress-operator-${{ github.run_id }}-${{ github.run_number }}
      - name: Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: DockerHub Login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Dockerhub
        uses: docker/build-push-action@v2
        with:
          file: Dockerfile
          context: '.'
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            nginx/nginx-ingress-operator:latest
            nginx/nginx-ingress-operator:${{ needs.vars.outputs.git_tag }}
          push: true
          pull: true

  notify:
    name: Notify
    runs-on: ubuntu-20.04
    needs: [vars, release-docker]
    if: always() && github.ref == 'refs/heads/master'
    steps:
      - name: Workflow Status
        id: check
        uses: martialonline/workflow-status@v2
      - name: Send Notification
        uses: 8398a7/action-slack@v3
        if: steps.check.outputs.status == 'failure'
        with:
          status: custom
          custom_payload: |
            {
              username: 'Github',
              icon_emoji: ':octocat:',
              mention: 'channel',
              attachments: [{
                title: '${{ needs.vars.outputs.repo_name }} ${{ github.workflow }} pipeline has failed',
                color: '${{ steps.check.outputs.status }}' == 'failure' ? 'danger' : 'warning',
                fields: [{
                  title: 'Commit Hash',
                  value: '${{ needs.vars.outputs.sha_short }}',
                  short: true
                },
                {
                  title: 'Author',
                  value: '${{ github.actor }}',
                  short: true
                },
                {
                  title: 'Commit Message',
                  value: `${{ github.event.head_commit.message }}`,
                  short: false
                },
                {
                  title: 'Pipeline URL',
                  value: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}',
                  short: false
                }]
              }]
            }
        env:
          GITHUB_TOKEN: ${{ github.token }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
